/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GravatarRegistryInterface extends utils.Interface {
  functions: {
    "createGravatar(string,string)": FunctionFragment;
    "getGravatar(address)": FunctionFragment;
    "gravatarToOwner(uint256)": FunctionFragment;
    "gravatars(uint256)": FunctionFragment;
    "ownerToGravatar(address)": FunctionFragment;
    "setMythicalGravatar()": FunctionFragment;
    "updateGravatarImage(string)": FunctionFragment;
    "updateGravatarName(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createGravatar",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getGravatar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gravatarToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gravatars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToGravatar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMythicalGravatar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGravatarImage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGravatarName",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createGravatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGravatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gravatarToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gravatars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToGravatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMythicalGravatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGravatarImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGravatarName",
    data: BytesLike
  ): Result;

  events: {
    "NewGravatar(uint256,address,string,string)": EventFragment;
    "UpdatedGravatar(uint256,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewGravatar"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGravatar"): EventFragment;
}

export type NewGravatarEvent = TypedEvent<
  [BigNumber, string, string, string],
  { id: BigNumber; owner: string; displayName: string; imageUrl: string }
>;

export type NewGravatarEventFilter = TypedEventFilter<NewGravatarEvent>;

export type UpdatedGravatarEvent = TypedEvent<
  [BigNumber, string, string, string],
  { id: BigNumber; owner: string; displayName: string; imageUrl: string }
>;

export type UpdatedGravatarEventFilter = TypedEventFilter<UpdatedGravatarEvent>;

export interface GravatarRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GravatarRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGravatar(
      _displayName: string,
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGravatar(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    gravatarToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gravatars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        displayName: string;
        imageUrl: string;
      }
    >;

    ownerToGravatar(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMythicalGravatar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGravatarImage(
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGravatarName(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createGravatar(
    _displayName: string,
    _imageUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGravatar(
    owner: string,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  gravatarToOwner(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  gravatars(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      owner: string;
      displayName: string;
      imageUrl: string;
    }
  >;

  ownerToGravatar(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setMythicalGravatar(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGravatarImage(
    _imageUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGravatarName(
    _displayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGravatar(
      _displayName: string,
      _imageUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getGravatar(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    gravatarToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    gravatars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        displayName: string;
        imageUrl: string;
      }
    >;

    ownerToGravatar(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMythicalGravatar(overrides?: CallOverrides): Promise<void>;

    updateGravatarImage(
      _imageUrl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGravatarName(
      _displayName: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewGravatar(uint256,address,string,string)"(
      id?: null,
      owner?: null,
      displayName?: null,
      imageUrl?: null
    ): NewGravatarEventFilter;
    NewGravatar(
      id?: null,
      owner?: null,
      displayName?: null,
      imageUrl?: null
    ): NewGravatarEventFilter;

    "UpdatedGravatar(uint256,address,string,string)"(
      id?: null,
      owner?: null,
      displayName?: null,
      imageUrl?: null
    ): UpdatedGravatarEventFilter;
    UpdatedGravatar(
      id?: null,
      owner?: null,
      displayName?: null,
      imageUrl?: null
    ): UpdatedGravatarEventFilter;
  };

  estimateGas: {
    createGravatar(
      _displayName: string,
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGravatar(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    gravatarToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gravatars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerToGravatar(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMythicalGravatar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGravatarImage(
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGravatarName(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGravatar(
      _displayName: string,
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGravatar(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gravatarToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gravatars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerToGravatar(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMythicalGravatar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGravatarImage(
      _imageUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGravatarName(
      _displayName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
